{"version":3,"sources":["components/Card/img/cat-solid.svg","components/Card/img/crow-solid.svg","components/Card/img/dog-solid.svg","components/Card/img/dragon-solid.svg","components/Card/img/fish-solid.svg","components/Card/img/frog-solid.svg","components/Card/img/hippo-solid.svg","components/Card/img/spider-solid.svg","components/Card/Card.js","components/Cardstack/Cardstack.js","components/Header/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","image","isSelected","isCorrect","onSelect","react_default","a","createElement","className","style","backgroundColor","onClick","visibility","src","alt","Cardstack","cards","onCardClick","map","i","components_Card_Card","key","includes","Header","onRestartClick","images","cat","crow","dog","dragon","fish","frog","hippo","spider","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","shuffleArray","slice","selected","correct","clickedIndex","_this$state","state","length","concat","setTimeout","alert","array","j","Math","floor","random","_this$state2","components_Header_Header","components_Cardstack_Cardstack","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9702c68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-solid.6b48e011.svg\";","module.exports = __webpack_public_path__ + \"static/media/crow-solid.14678af6.svg\";","module.exports = __webpack_public_path__ + \"static/media/dog-solid.4028858f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dragon-solid.bcc2d9f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/fish-solid.e1742c36.svg\";","module.exports = __webpack_public_path__ + \"static/media/frog-solid.355024dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/hippo-solid.c03b8464.svg\";","module.exports = __webpack_public_path__ + \"static/media/spider-solid.a45e6230.svg\";","import React from 'react';\nimport './Card.css';\n\nconst Card = ({ image, isSelected, isCorrect, onSelect }) => (\n  <div \n  \tclassName='card'\n  \tstyle={{ backgroundColor: (isCorrect || isSelected) ? '#40E0D0' : '#293540' }}\n  \tonClick={() => {\n      // You can only select a card that's not already correct and\n      // isn't currently selected\n      if (!isCorrect && !isSelected) {\n        onSelect();\n      }\n    }}\n  >\n  \t<img \n  \t\tstyle={{ visibility: (isCorrect || isSelected) ? 'visible' : 'hidden' }}\n      src={image}\n      alt={image}\n  \t/>\t\n  </div>\n);\n\nexport default Card;","import React from 'react';\nimport './Cardstack.css';\nimport Card from '../Card/Card';\n\nconst Cardstack = ({ isCorrect, isSelected, cards, onCardClick }) => {\n\n\treturn(\n\t\t<div className='cardstack'>\n\t\t\t{cards.map((image, i) => (\n        <Card \n        \tclassName='card'\n          key={i}\n          image={image}\n          isCorrect={isCorrect.includes(i)}\n          isSelected={isSelected.includes(i)}\n          onSelect={() => onCardClick(i)}\n        />\n      ))}\n\t\t</div>\n\t);\n}\n\nexport default Cardstack;","import React from 'react';\nimport './Header.css';\n\nconst Header = ({ onRestartClick }) => (\n  <div className='Header'>\n\t  <div className='App-header'>\n\t\t  <p>Matching Game</p>\n\t  </div>\n\t  <div className='Header-Container'>\n\t  \t<button \n\t  \t\tclassName=\"RestartButton\"\n\t  \t\tonClick={onRestartClick}\n\t  \t>\n\t  \t\tNew Game\n\t  \t</button>\n\t  </div>\n  </div>\n);\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Cardstack from '../components/Cardstack/Cardstack';\nimport Header from '../components/Header/Header';\nimport cat from '../components/Card/img/cat-solid.svg';\nimport crow from '../components/Card/img/crow-solid.svg';\nimport dog from '../components/Card/img/dog-solid.svg';\nimport dragon from '../components/Card/img/dragon-solid.svg';\nimport fish from '../components/Card/img/fish-solid.svg';\nimport frog from '../components/Card/img/frog-solid.svg';\nimport hippo from '../components/Card/img/hippo-solid.svg';\nimport spider from '../components/Card/img/spider-solid.svg';\n\nconst images = [cat, cat, crow, crow, dog, dog, dragon, dragon, fish, fish, \n\tfrog, frog, hippo, hippo, spider, spider];\n\nclass App extends Component {\n  \n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t    cards: this.shuffleArray(images.slice()),\n\t    selected: [],\n\t    correct: [] \n\t\t}\n\t}\n\n\tonRestartClick = () => {\n\t\tthis.setState({\n\t\t\tcards: this.shuffleArray(images.slice()),\n\t    selected: [],\n\t    correct: []\n\t\t});\n\t}\n\n\tonCardClick = (clickedIndex) => {\n    const { selected, cards, correct } = this.state;\n    if (selected.length === 0) { // selecting a first card\n      this.setState({ selected: [clickedIndex] })\n    } else if (selected.length === 1) { // they're selecting a second card\n      if (cards[selected[0]] === cards[clickedIndex]) {\n        // It's a match :)\n        // Add selected cards to `correct` and reset selection\n        this.setState({\n            correct: correct.concat([selected[0], clickedIndex]),\n            selected: []\n        });\n        if (correct.length === 14) {\n        \tsetTimeout(() => {\n        \t\talert('Congratulations!');\n        \t\tthis.onRestartClick();\n        \t}, 1000);\n        }\n      } else {\n        // It's not a match \n        // Select it for now, and reset selection in a bit\n        this.setState({ selected: [selected[0], clickedIndex] });\n        setTimeout(() => {\n          this.setState({ selected: [] })\n        }, 1500);\n      }\n    }\n    // Otherwise they already have 2 selected and we don't want to do anything\n  }\n\n  shuffleArray = (array) => {\n\t  for (let i = array.length - 1; i > 0; i--) {\n\t    let j = Math.floor(Math.random() * (i + 1));\n\t    [array[i], array[j]] = [array[j], array[i]];\n\t  }\n\t  return array;\n\t}\n\n\trender() {\n\t\tconst { correct, selected, cards } = this.state;\n\t  return (\n\t    <div className=\"App\">\n\t      <Header \n\t      \tonRestartClick={this.onRestartClick}/>\n\t      <Cardstack \n\t      \tisCorrect={correct}\n\t      \tisSelected={selected}\n\t      \tcards={cards}\n\t      \tonCardClick={this.onCardClick}\n\t      />\n\t    </div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}